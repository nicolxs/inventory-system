package domain

import (
	"context"
	"time"
)

// Item represents an inventory item in the database.
type Item struct {
	ID                string    `json:"id" db:"id"`
	SKU               string    `json:"sku" db:"sku"`
	Name              string    `json:"name" db:"name"`
	Description       *string   `json:"description,omitempty" db:"description"` // Pointer for nullable
	Quantity          int       `json:"quantity" db:"quantity"`
	Price             float64   `json:"price" db:"price"`                       // Consider using decimal types for money in real apps
	LowStockThreshold *int      `json:"low_stock_threshold,omitempty" db:"low_stock_threshold"` // Pointer for nullable
	CreatedAt         time.Time `json:"created_at" db:"created_at"`
	UpdatedAt         time.Time `json:"updated_at" db:"updated_at"`
}

// CreateItemRequest defines the payload for creating a new item.
// ID, CreatedAt, UpdatedAt are generated by the server/DB.
type CreateItemRequest struct {
	SKU               string  `json:"sku" validate:"required,alphanumdash,max=100"`
	Name              string  `json:"name" validate:"required,max=255"`
	Description       *string `json:"description,omitempty"`
	Quantity          int     `json:"quantity" validate:"gte=0"`
	Price             float64 `json:"price" validate:"required,gt=0"`
	LowStockThreshold *int    `json:"low_stock_threshold,omitempty" validate:"omitempty,gte=0"`
}

// UpdateItemRequest defines the payload for updating an existing item.
// All fields are optional; only provided fields will be updated.
type UpdateItemRequest struct {
	SKU               *string  `json:"sku,omitempty" validate:"omitempty,alphanumdash,max=100"`
	Name              *string  `json:"name,omitempty" validate:"omitempty,max=255"`
	Description       *string  `json:"description,omitempty"`
	Quantity          *int     `json:"quantity,omitempty" validate:"omitempty,gte=0"`
	Price             *float64 `json:"price,omitempty" validate:"omitempty,gt=0"`
	LowStockThreshold *int     `json:"low_stock_threshold,omitempty" validate:"omitempty,gte=0"`
}

// ItemRepository defines the interface for item data storage operations.
type ItemRepository interface {
	Create(ctx context.Context, item *Item) (*Item, error)
	GetByID(ctx context.Context, id string) (*Item, error)
	GetAll(ctx context.Context, page, limit int) ([]*Item, int, error) // Returns items and total count for pagination
	Update(ctx context.Context, id string, item *Item) (*Item, error)
	Delete(ctx context.Context, id string) error
	// For analytics (can be in a separate repository or here for simplicity)
	GetTotalStockValue(ctx context.Context) (float64, error)
	GetLowStockItems(ctx context.Context, globalThreshold int) ([]*Item, error)
	GetMostValuableItems(ctx context.Context, limit int) ([]*Item, error)
}

// ItemService defines the interface for item business logic.
type ItemService interface {
	CreateItem(ctx context.Context, req *CreateItemRequest) (*Item, error)
	GetItemByID(ctx context.Context, id string) (*Item, error)
	GetItems(ctx context.Context, page, limit int) ([]*Item, int, error)
	UpdateItem(ctx context.Context, id string, req *UpdateItemRequest) (*Item, error)
	DeleteItem(ctx context.Context, id string) error
}

// AnalyticsService defines the interface for analytics logic.
type AnalyticsService interface {
	CalculateTotalStockValue(ctx context.Context) (float64, error)
	ListLowStockItems(ctx context.Context, globalThreshold int) ([]*Item, error)
	ListMostValuableItems(ctx context.Context, limit int) ([]*Item, error)
}

// WebSocketMessage for real-time updates
type WebSocketMessage struct {
	Type    string      `json:"type"`
	Payload interface{} `json:"payload"`
}

const (
	StockUpdateMessageType = "STOCK_UPDATE"
)

type StockUpdatePayload struct {
	ID          string `json:"id"`
	SKU         string `json:"sku"`
	NewQuantity int    `json:"new_quantity"`
}
